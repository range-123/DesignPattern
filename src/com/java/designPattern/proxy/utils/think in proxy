1.什么是代理
 不通过目标对象，可以借助代理对象去调用目标对象方法，这种过程叫做代理，
  扩展：代理的作用
   1.不直接对目标对象进行访问
   2.可以扩展或者增强目标对象的功能

2.代理的分类
  1.静态代理- 指目标对象与代理对象同时实现一个接口，通过注入（组合）的方式，引入目标对象的方法，可在执行前后加入其他功能，从而增强功能。
  2.动态代理- 代理类借助InvocationHandle 接口 注入对象（Object） 通过Proxy.newProxyInstance(loalClass,interfaces,InvocationHanld对应的this)
             然后，通过重写invocationHandle接口的invoke方法，调用method.invoke(target,args)在jvm中 生成代理对象（&Proxy0）,从而调用目标对象的方法.
             解释：上述Object指目标对象 使用Proxy.newProxyInstance()方法时，需要放回其结果（Object）
                   动态代理需要目标对象实现接口，因为jdk动态代理的执行是：1.借助jvm生成一个代理对象在内存中，然后该代理对象会实现接口中所有的方法，通过反射
                   可以得到每个方法的实现结果。
             细节：Proxy在jvm动态生成代理对象&Proxy0--实现了接口中的所有方法，说明： 然后将其转化为.class文件，再由getProxyClass() 方法生成.java文件 其中实现了InvocationHandle接口.
                  放入jvm重新进行加载成.class文件，
  3.cglib代理 -借助asm框架生成.class文件 目标对象不需要实现接口，代理对象需要实现 MethodInterceptor 构造一个Enhance类 superclass 设置生成的子类 callback 最后调调create方法。
               重写invoke方法 method.invokeSuper(target，objects);可以在invokeSuper前后增强方法功能。
               解释：代理子类会从代理父类中继承所有的方法。子类会调用Intercept()方法，然后调用invokeSuper方法，生成FastClass类 --通过index 调用对应的目标方法
3.每个代理的优缺点
    1.静态代理：加入功能时，总要修改代理类的方法，代码过多，耦合度高
    2.动态代理：需要实现接口，动态代理通过反射执行目标方法，效率比cglib低，cglib通过FastClass直接调用，执行效率高
    3.cglib代理：不需要实现接口，动态代理直接转为字节码，而cglib借助Asm框架转为字节码 生成代理类的效率低

4.代理的源码解析
   参考：上述2

5.如何选择不同的代理
   简单的 不经常更改的直接用静态代理
   有接口的 用动态代理
   无接口的 用cglib
   扩展：spring 源码中通过工厂模式根据有无接口，进行选择不同的代理方式

6.怎么手写jdk动态代理，并且加入关键信息
  思路：写一个类似InvocationHandle接口的invoke 方法 ，然后重写Proxy.newProxyInstance（）方法，
  执行顺序：准备在运行时，借助ProxyGener()方法生成代理对象，并写入磁盘中--&Proxy.class
  借助jad生成对应的.java文件，参考后，通过springBuffer手写里面的类信息，然后转为.java文件，借助动态编译，重写loadClass方法 最后返回一个class对象，newInstance生成对应的类。

7.为什么动态代理接口数量不可以超过65535
  在jvm内存中，对象的名字，属性 类型 接口都有相应的内存大小，而接口的内存大小为2个字节，因为接口的下标从1开始 故长度为：2<<16-1 =  65535

8.怎么将代理运用到项目中
  1.将业务代码作为目标类方法，将流程性或者增加方法作为加强方法 写入在业务代码之中。比如 每加入一个订单时，需要记录下一天内加入订单的次数 ，如数据库的切换，根据不同条件，当数据加入时，选择不同的
  数据库进行操作，如：日志管理，执行此类方法时，需要进行打印出来相应的信息至某处。

9.剖析Aop 原理
  后续补充 ---深入AOP